// lib/fileUtils.ts - Updated for 3-field duplicate checking (orderNo + opcus + transactionDate)
import * as XLSX from 'xlsx'
import { logError, logInfo, logWarn, parseTransactionDate, parseExcelDate, checkBatchDuplicates } from './database'


/**
 * ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
 */
export const readExcelFile = (buffer) => {
  try {
    logInfo('üìÇ Reading Excel file from buffer', { bufferSize: buffer.length })
    
    const workbook = XLSX.read(buffer, {
      type: 'buffer',
      cellDates: true,
      cellNF: false,
      cellText: false
    })
    
    logInfo('‚úÖ Excel file read successfully', {
      sheetNames: workbook.SheetNames,
      sheetCount: workbook.SheetNames.length
    })
    
    return workbook
  } catch (error) {
    logError('‚ùå Error reading Excel file', error)
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel worksheet ‡πÄ‡∏õ‡πá‡∏ô JSON
 */
export const worksheetToJson = (worksheet) => {
  try {
    logInfo('üîÑ Converting worksheet to JSON')
    
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const jsonData = XLSX.utils.sheet_to_json(worksheet, {
      header: 1,
      defval: '',
      blankrows: false,
      raw: false  // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° raw: false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô string
    })
    
    logInfo('üìã Raw JSON data from Excel', { 
      totalRows: jsonData.length,
      firstFewRows: jsonData.slice(0, 3)
    })
    
    if (!jsonData || jsonData.length === 0) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢')
    }
    
    if (jsonData.length < 2) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÅ‡∏Ñ‡πà header ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
    }
    
    // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
    const headers = jsonData[0]
    const dataRows = jsonData.slice(1)
    
    logInfo('üìã Excel headers found', { 
      headers,
      dataRowCount: dataRows.length,
      sampleDataRow: dataRows[0]
    })
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö headers ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredHeaders = ['Transaction Date', 'Order No.', 'Fee Name', 'Amount']
    const missingHeaders = requiredHeaders.filter(header => 
      !headers.some(h => h && h.toString().toLowerCase().includes(header.toLowerCase()))
    )
    
    if (missingHeaders.length > 0) {
      logWarn('‚ö†Ô∏è Missing required headers', { 
        missingHeaders, 
        availableHeaders: headers 
      })
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô object array
    const processedData = dataRows
      .filter(row => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasData = row && row.length > 0 && row.some(cell => 
          cell !== '' && cell !== null && cell !== undefined
        )
        return hasData
      })
      .map((row, index) => {
        const obj = {}
        headers.forEach((header, colIndex) => {
          if (header) {  // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ header ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
            obj[header] = row[colIndex] || ''
          }
        })
        
        logInfo(`üìÑ Processing row ${index + 1}`, {
          rowIndex: index + 1,
          rowData: obj,
          hasOrderNo: !!obj['Order No.'],
          hasAmount: !!obj['Amount']
        })
        
        return obj
      })
    
    logInfo('‚úÖ Worksheet converted to JSON', {
      totalRows: dataRows.length,
      validRows: processedData.length,
      sampleProcessedData: processedData.slice(0, 2)
    })
    
    if (processedData.length === 0) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel')
    }
    
    return processedData
  } catch (error) {
    logError('‚ùå Error converting worksheet to JSON', error)
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel ‡πÑ‡∏î‡πâ: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lazada ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö duplicate ‡∏î‡πâ‡∏ß‡∏¢ 3 ‡∏ü‡∏¥‡∏•‡∏î‡πå
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° opcus parameter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
 */
export const processLazadaData = async (rawData,opcus // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° opcus parameter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö duplicate
) => {
  try {
    logInfo('üîÑ Starting Lazada data processing with 3-field duplicate check', { 
      totalRecords: rawData.length,
      opcus: opcus || 'NOT_PROVIDED'
    })
    
    const errors = []
    const warnings = []
    const duplicateDetails = []
    
    if (!rawData || rawData.length === 0) {
      return {
        success: false,
        errors: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•']
      }
    }
    
    // Step 1: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const initialProcessedData = []
    
    for (let i = 0; i < rawData.length; i++) {
      const row = rawData[i]
      
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!row['Order No.'] || !row['Fee Name'] || row['Amount'] === undefined) {
          errors.push(`‡πÅ‡∏ñ‡∏ß ${i + 2}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ Order No, Fee Name ‡∏´‡∏£‡∏∑‡∏≠ Amount`)
          continue
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        let transactionDate
        try {
          if (row['Transaction Date']) {
            transactionDate = parseExcelDate(row['Transaction Date'])
          } else {
            throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°')
          }
        } catch (dateError) {
          errors.push(`‡πÅ‡∏ñ‡∏ß ${i + 2}: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ - ${dateError instanceof Error ? dateError.message : 'Unknown error'}`)
          continue
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        const processedItem = {
          transactionDate,
          orderNo: String(row['Order No.']).trim(),
          orderItemNo: String(row['Order Item No.'] || '').trim(),
          feeNameType: String(row['Fee Name']).trim(),
          amount: Number(row['Amount']) || 0,
          details: row['Details'] ? String(row['Details']).trim() : undefined,
          sellerSku: row['Seller SKU'] ? String(row['Seller SKU']).trim() : undefined,
          vatAmount: row['VAT in Amount'] ? Number(row['VAT in Amount']) : undefined,
          whtAmount: row['WHT Amount'] ? Number(row['WHT Amount']) : undefined,
          transactionNumber: row['Transaction Number'] ? String(row['Transaction Number']).trim() : undefined,
          reference: row['Reference'] ? String(row['Reference']).trim() : undefined,
          comment: row['Comment'] ? String(row['Comment']).trim() : undefined
        }
        
        initialProcessedData.push(processedItem)
        
      } catch (rowError) {
        errors.push(`‡πÅ‡∏ñ‡∏ß ${i + 2}: ${rowError instanceof Error ? rowError.message : 'Unknown error'}`)
      }
    }
    
    logInfo('üìä Initial data processing completed', {
      totalRows: rawData.length,
      processedRows: initialProcessedData.length,
      errorRows: errors.length
    })
    
    if (initialProcessedData.length === 0) {
      return {
        success: false,
        errors: errors.length > 0 ? errors : ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ']
      }
    }
    
    // ‚úÖ Step 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö duplicate ‡∏î‡πâ‡∏ß‡∏¢ 3 ‡∏ü‡∏¥‡∏•‡∏î‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ opcus)
    if (opcus) {
      logInfo('üîç Starting 3-field duplicate check', { opcus })
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ unique orders ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö duplicates
     const uniqueOrdersMap = new Map();

      initialProcessedData.forEach(item => {
        const key = `${item.orderNo}|${opcus}|${item.transactionDate.toISOString().split('T')[0]}|${item.orderItemNo}`
        if (!uniqueOrdersMap.has(key)) {
          uniqueOrdersMap.set(key, {
            orderNo: item.orderNo,
            opcus: opcus,          // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° opcus
            transactionDate: item.transactionDate,
            orderItemNo: item.orderItemNo
          })
        }
      })
      
      const uniqueOrders = Array.from(uniqueOrdersMap.values())
      
      logInfo('üîç Starting batch duplicate check with 3-field validation', { 
        totalRecords: initialProcessedData.length,
        uniqueOrdersToCheck: uniqueOrders.length,
        opcus: opcus,
        sampleUniqueOrders: uniqueOrders.slice(0, 3).map(o => ({
          orderNo: o.orderNo,
          opcus: o.opcus,
          orderItemNo: o.orderItemNo,
          transactionDate: o.transactionDate.toISOString(),
          displayDate: o.transactionDate.toLocaleDateString('th-TH')
        }))
      })
      
      // ‚úÖ Step 3: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ checkBatchDuplicates ‡∏î‡πâ‡∏ß‡∏¢ 3 ‡∏ü‡∏¥‡∏•‡∏î‡πå
      const duplicateCheckResults = await checkBatchDuplicates(uniqueOrders)
      
      // Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lookup duplicates
        const duplicateMap = new Map();

      let duplicateInMain = 0
      let duplicateInAS400 = 0
      
      duplicateCheckResults.forEach(result => {
        const key = `${result.orderNo}|${result.opcus}|${result.transactionDate.toISOString().split('T')[0]}|${result.orderItemNo || ''}`
        duplicateMap.set(key, result.duplicateCheck)
        
        if (result.duplicateCheck.isDuplicate) {
          if (result.duplicateCheck.location === 'main_table') {
            duplicateInMain++
          } else if (result.duplicateCheck.location === 'as400') {
            duplicateInAS400++
          }
          
          duplicateDetails.push({
            orderNo: result.orderNo,
            opcus: result.opcus,
            transactionDate: result.transactionDate.toISOString().split('T')[0],
            location: result.duplicateCheck.location || 'unknown',
            reason: result.duplicateCheck.reason || 'Unknown duplicate',
            details: result.duplicateCheck.details
          })
        }
      })
      
      logInfo('üìä Duplicate check results summary with 3-field validation', {
        totalUniqueOrders: uniqueOrders.length,
        duplicatesFound: duplicateDetails.length,
        duplicateInMain,
        duplicateInAS400,
        opcus: opcus,
        duplicateDetails: duplicateDetails.slice(0, 5).map(d => ({
          orderNo: d.orderNo,
          opcus: d.opcus,
          location: d.location,
          reason: d.reason
        }))
      })
      
      // Step 5: ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• duplicate ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
      initialProcessedData.forEach(item => {
        const key = `${item.orderNo}|${opcus}|${item.transactionDate.toISOString().split('T')[0]}|${item.orderItemNo}`
        const duplicateCheck = duplicateMap.get(key)
        
        if (duplicateCheck && duplicateCheck.isDuplicate) {
          item.isDuplicate = true
          item.duplicateReason = duplicateCheck.reason
          item.duplicateLocation = duplicateCheck.location
          item.duplicateDetails = duplicateCheck.details
          
          logWarn(`‚ö†Ô∏è Marking record as duplicate (3-field check)`, {
            orderNo: item.orderNo,
            opcus: opcus,
            orderItemNo: item.orderItemNo,
            transactionDate: item.transactionDate.toISOString(),
            location: duplicateCheck.location,
            reason: duplicateCheck.reason
          })
        } else {
          item.isDuplicate = false
        }
      })
      
      // Step 6: ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ temp table)
      const validNonDuplicateData = initialProcessedData.filter(item => !item.isDuplicate)
      
      logInfo('üìä Final data filtering completed with 3-field duplicate check', {
        totalProcessed: initialProcessedData.length,
        duplicates: initialProcessedData.length - validNonDuplicateData.length,
        validNonDuplicates: validNonDuplicateData.length,
        opcus: opcus,
        finalSampleDates: validNonDuplicateData.slice(0, 3).map(d => ({
          orderNo: d.orderNo,
          transactionDate: d.transactionDate.toISOString(),
          displayDate: d.transactionDate.toLocaleDateString('th-TH'),
          note: 'These dates should now be correct in GMT+7'
        }))
      })
      
      // Step 7: ‡∏™‡∏£‡πâ‡∏≤‡∏á summary
      const uniqueOrdersAfterFilter = new Set(
        validNonDuplicateData.map(d => `${d.orderNo}-${d.orderItemNo}`)
      ).size
      
      const summary = {
        totalRecords: rawData.length,
        validRecords: validNonDuplicateData.length, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        invalidRecords: rawData.length - initialProcessedData.length,
        uniqueOrders: uniqueOrdersAfterFilter,
        duplicateRecords: initialProcessedData.length - validNonDuplicateData.length,
        duplicateInMain,
        duplicateInAS400
      }
      
      logInfo('‚úÖ Data processing with 3-field duplicate check completed', summary)
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° warnings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö duplicates
      if (duplicateDetails.length > 0) {
        warnings.push(`‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ${duplicateDetails.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πá‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢ Order No + Store + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà):`)
        duplicateDetails.forEach((dup, index) => {
          if (index < 10) { // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
            const location = dup.location === 'main_table' ? '‡∏ï‡∏≤‡∏£‡∏≤‡∏á Main' : 
                            dup.location === 'as400' ? '‡∏£‡∏∞‡∏ö‡∏ö AS400' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'
            warnings.push(`- Order ${dup.orderNo} (${dup.opcus}) ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${dup.transactionDate}: ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô${location}`)
          }
        })
        if (duplicateDetails.length > 10) {
          warnings.push(`... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${duplicateDetails.length - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
        }
      }
      
      return {
        success: errors.length === 0 || validNonDuplicateData.length > 0,
        data: validNonDuplicateData, // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        summary,
        errors: errors.length > 0 ? errors : undefined,
        warnings: warnings.length > 0 ? warnings : undefined,
        duplicateDetails
      }
      
    } else {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ opcus ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ duplicate)
      logWarn('‚ö†Ô∏è No opcus provided - skipping duplicate check', {
        totalProcessed: initialProcessedData.length,
        note: 'Duplicate checking requires opcus parameter'
      })
      
      const uniqueOrdersCount = new Set(
        initialProcessedData.map(d => `${d.orderNo}-${d.orderItemNo}`)
      ).size
      
      const summary = {
        totalRecords: rawData.length,
        validRecords: initialProcessedData.length,
        invalidRecords: rawData.length - initialProcessedData.length,
        uniqueOrders: uniqueOrdersCount,
        duplicateRecords: 0,
        duplicateInMain: 0,
        duplicateInAS400: 0
      }
      
      warnings.push('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤')
      
      return {
        success: errors.length === 0 || initialProcessedData.length > 0,
        data: initialProcessedData,
        summary,
        errors: errors.length > 0 ? errors : undefined,
        warnings: warnings.length > 0 ? warnings : undefined,
        duplicateDetails: []
      }
    }
    
  } catch (error) {
    logError('‚ùå Error in processLazadaData with 3-field duplicate check', error)
    return {
      success: false,
      errors: [`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${error instanceof Error ? error.message : 'Unknown error'}`]
    }
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel
 */
export const validateExcelFile = (buffer) => {
  try {
    logInfo('‚úÖ Validating Excel file format')
    
    const workbook = readExcelFile(buffer)
    
    if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
      return { isValid: false, error: '‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡∏°‡∏µ worksheet' }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö worksheet ‡πÅ‡∏£‡∏Å
    const firstSheetName = workbook.SheetNames[0]
    const worksheet = workbook.Sheets[firstSheetName]
    
    if (!worksheet) {
      return { isValid: false, error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô worksheet ‡πÑ‡∏î‡πâ' }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 })
    
    if (!jsonData || jsonData.length < 2) {
      return { isValid: false, error: '‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÅ‡∏Ñ‡πà header' }
    }
    
    logInfo('‚úÖ Excel file validation passed', {
      sheetCount: workbook.SheetNames.length,
      firstSheetName,
      dataRowCount: jsonData.length - 1
    })
    
    return { isValid: true }
    
  } catch (error) {
    logError('‚ùå Excel file validation failed', error)
    return {
      isValid: false,
      error: `‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${error instanceof Error ? error.message : 'Unknown error'}`
    }
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
 */
export const validateFileFormat = (fileName) => {
  try {
    logInfo('üîç Validating file format', { fileName })
    
    if (!fileName) {
      return { isValid: false, error: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå' }
    }
    
    const fileExtension = fileName.toLowerCase().split('.').pop()
    const allowedExtensions = ['xlsx', 'xls']
    
    if (!fileExtension || !allowedExtensions.includes(fileExtension)) {
      return { 
        isValid: false, 
        error: `‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå ${allowedExtensions.join(', ')} ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ${fileExtension})` 
      }
    }
    
    logInfo('‚úÖ File format validation passed', { fileName, fileExtension })
    return { isValid: true }
    
  } catch (error) {
    logError('‚ùå File format validation failed', error)
    return { 
      isValid: false, 
      error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
 */
export const validateFileSize = (fileSize, maxSizeMB = 10) => {
  try {
    logInfo('üìè Validating file size', { fileSize, maxSizeMB })
    
    if (fileSize <= 0) {
      return { isValid: false, error: '‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤' }
    }
    
    const maxSizeBytes = maxSizeMB * 1024 * 1024 // ‡πÅ‡∏õ‡∏•‡∏á MB ‡πÄ‡∏õ‡πá‡∏ô bytes
    
    if (fileSize > maxSizeBytes) {
      const fileSizeMB = (fileSize / (1024 * 1024)).toFixed(2)
      return { 
        isValid: false, 
        error: `‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${fileSizeMB} MB) ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: ${maxSizeMB} MB` 
      }
    }
    
    const fileSizeMB = (fileSize / (1024 * 1024)).toFixed(2)
    logInfo('‚úÖ File size validation passed', { fileSize, fileSizeMB: `${fileSizeMB} MB`, maxSizeMB })
    
    return { isValid: true }
    
  } catch (error) {
    logError('‚ùå File size validation failed', error)
    return { 
      isValid: false, 
      error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: ${error instanceof Error ? error.message : 'Unknown error'}` 
    }
  }
}

/**
 * ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
 */
export const extractDataFromExcel = async (buffer,opcus) => {
  try {
    logInfo('üìÇ Starting Excel data extraction with 3-field duplicate check', { 
      bufferSize: buffer.length,
      opcus: opcus || 'NOT_PROVIDED'
    })
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
    const validation = validateExcelFile(buffer)
    if (!validation.isValid) {
      return {
        success: false,
        errors: [validation.error || '‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á']
      }
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const workbook = readExcelFile(buffer)
    const firstSheetName = workbook.SheetNames[0]
    const worksheet = workbook.Sheets[firstSheetName]
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
    const rawData = worksheetToJson(worksheet)
    
    // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö duplicate ‡∏î‡πâ‡∏ß‡∏¢ opcus
    const result = await processLazadaData(rawData, opcus)
    
    logInfo('‚úÖ Excel data extraction completed with 3-field duplicate check', {
      success: result.success,
      totalRecords: result.summary?.totalRecords || 0,
      validRecords: result.summary?.validRecords || 0,
      duplicateRecords: result.summary?.duplicateRecords || 0,
      opcus: opcus || 'NOT_PROVIDED'
    })
    
    return result
    
  } catch (error) {
    logError('‚ùå Error extracting data from Excel with 3-field duplicate check', error)
    return {
      success: false,
      errors: [`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${error instanceof Error ? error.message : 'Unknown error'}`]
    }
  }
}